// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'package:collection/collection.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

abstract class FlutterDiscordRpc {
  Future<void> discordInit({required String clientId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDiscordInitConstMeta;

  Future<void> discordConnect({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDiscordConnectConstMeta;

  Future<void> discordReconnect({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDiscordReconnectConstMeta;

  Future<void> discordClose({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDiscordCloseConstMeta;

  Future<void> discordClearActivity({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDiscordClearActivityConstMeta;

  Future<void> discordSetActivity({required RPCActivity activity, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDiscordSetActivityConstMeta;

  Future<void> discordDispose({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDiscordDisposeConstMeta;
}

class I32Array2 extends NonGrowableListView<int> {
  static const arraySize = 2;
  I32Array2(Int32List inner)
      : assert(inner.length == arraySize),
        super(inner);
  I32Array2.unchecked(Int32List inner) : super(inner);
  I32Array2.init() : super(Int32List(arraySize));
}

/// A struct representing a Discord rich presence activity
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCActivity {
  final String? state;
  final String? details;
  final RPCTimestamps? timestamps;
  final RPCParty? party;
  final RPCAssets? assets;
  final RPCSecrets? secrets;
  final List<RPCButton>? buttons;

  const RPCActivity({
    this.state,
    this.details,
    this.timestamps,
    this.party,
    this.assets,
    this.secrets,
    this.buttons,
  });
}

/// A struct representing the art assets and hover text
/// used by an `RPCActivity`
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCAssets {
  final String? largeImage;
  final String? largeText;
  final String? smallImage;
  final String? smallText;

  const RPCAssets({
    this.largeImage,
    this.largeText,
    this.smallImage,
    this.smallText,
  });
}

/// A struct representing the buttons that are
/// attached to an `RPCActivity`
///
/// An activity may have a maximum of 2 buttons
class RPCButton {
  final String label;
  final String url;

  const RPCButton({
    required this.label,
    required this.url,
  });
}

/// A struct representing an `RPCActivity`'s game party
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCParty {
  final String? id;
  final I32Array2? size;

  const RPCParty({
    this.id,
    this.size,
  });
}

/// A struct representing the secrets used by an
/// `RPCActivity`
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCSecrets {
  final String? join;
  final String? spectate;
  final String? matchStr;

  const RPCSecrets({
    this.join,
    this.spectate,
    this.matchStr,
  });
}

/// A struct representing an `RPCActivity`'s timestamps
/// Note that all methods return `Self`, and can be chained
/// for fluency
class RPCTimestamps {
  final int? start;
  final int? end;

  const RPCTimestamps({
    this.start,
    this.end,
  });
}

class FlutterDiscordRpcImpl implements FlutterDiscordRpc {
  final FlutterDiscordRpcPlatform _platform;
  factory FlutterDiscordRpcImpl(ExternalLibrary dylib) => FlutterDiscordRpcImpl.raw(FlutterDiscordRpcPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FlutterDiscordRpcImpl.wasm(FutureOr<WasmModule> module) => FlutterDiscordRpcImpl(module as ExternalLibrary);
  FlutterDiscordRpcImpl.raw(this._platform);
  Future<void> discordInit({required String clientId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(clientId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_discord_init(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDiscordInitConstMeta,
      argValues: [
        clientId
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDiscordInitConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "discord_init",
        argNames: [
          "clientId"
        ],
      );

  Future<void> discordConnect({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_discord_connect(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDiscordConnectConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDiscordConnectConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "discord_connect",
        argNames: [],
      );

  Future<void> discordReconnect({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_discord_reconnect(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDiscordReconnectConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDiscordReconnectConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "discord_reconnect",
        argNames: [],
      );

  Future<void> discordClose({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_discord_close(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDiscordCloseConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDiscordCloseConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "discord_close",
        argNames: [],
      );

  Future<void> discordClearActivity({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_discord_clear_activity(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDiscordClearActivityConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDiscordClearActivityConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "discord_clear_activity",
        argNames: [],
      );

  Future<void> discordSetActivity({required RPCActivity activity, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_rpc_activity(activity);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_discord_set_activity(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDiscordSetActivityConstMeta,
      argValues: [
        activity
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDiscordSetActivityConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "discord_set_activity",
        argNames: [
          "activity"
        ],
      );

  Future<void> discordDispose({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_discord_dispose(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDiscordDisposeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDiscordDisposeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "discord_dispose",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
