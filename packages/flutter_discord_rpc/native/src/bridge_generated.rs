#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::types::RPCActivity;
use crate::types::RPCAssets;
use crate::types::RPCButton;
use crate::types::RPCParty;
use crate::types::RPCSecrets;
use crate::types::RPCTimestamps;

// Section: wire functions

fn wire_discord_init_impl(port_: MessagePort, client_id: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "discord_init",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client_id = client_id.wire2api();
            move |task_callback| discord_init(api_client_id)
        },
    )
}
fn wire_discord_connect_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "discord_connect",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| discord_connect(),
    )
}
fn wire_discord_reconnect_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "discord_reconnect",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| discord_reconnect(),
    )
}
fn wire_discord_close_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "discord_close",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| discord_close(),
    )
}
fn wire_discord_clear_activity_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "discord_clear_activity",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| discord_clear_activity(),
    )
}
fn wire_discord_set_activity_impl(
    port_: MessagePort,
    activity: impl Wire2Api<RPCActivity> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "discord_set_activity",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_activity = activity.wire2api();
            move |task_callback| discord_set_activity(api_activity)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_discord_init(port_: MessagePort, client_id: String) {
        wire_discord_init_impl(port_, client_id)
    }

    #[wasm_bindgen]
    pub fn wire_discord_connect(port_: MessagePort) {
        wire_discord_connect_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_discord_reconnect(port_: MessagePort) {
        wire_discord_reconnect_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_discord_close(port_: MessagePort) {
        wire_discord_close_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_discord_clear_activity(port_: MessagePort) {
        wire_discord_clear_activity_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_discord_set_activity(port_: MessagePort, activity: JsValue) {
        wire_discord_set_activity_impl(port_, activity)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<[i32; 2]> for Box<[i32]> {
        fn wire2api(self) -> [i32; 2] {
            let vec: Vec<i32> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }

    impl Wire2Api<Vec<i32>> for Box<[i32]> {
        fn wire2api(self) -> Vec<i32> {
            self.into_vec()
        }
    }
    impl Wire2Api<Vec<RPCButton>> for JsValue {
        fn wire2api(self) -> Vec<RPCButton> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Option<String>> for Option<String> {
        fn wire2api(self) -> Option<String> {
            self.map(Wire2Api::wire2api)
        }
    }

    impl Wire2Api<Option<[i32; 2]>> for Option<Box<[i32]>> {
        fn wire2api(self) -> Option<[i32; 2]> {
            self.map(Wire2Api::wire2api)
        }
    }

    impl Wire2Api<RPCActivity> for JsValue {
        fn wire2api(self) -> RPCActivity {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                7,
                "Expected 7 elements, got {}",
                self_.length()
            );
            RPCActivity {
                state: self_.get(0).wire2api(),
                details: self_.get(1).wire2api(),
                timestamps: self_.get(2).wire2api(),
                party: self_.get(3).wire2api(),
                assets: self_.get(4).wire2api(),
                secrets: self_.get(5).wire2api(),
                buttons: self_.get(6).wire2api(),
            }
        }
    }
    impl Wire2Api<RPCAssets> for JsValue {
        fn wire2api(self) -> RPCAssets {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            RPCAssets {
                large_image: self_.get(0).wire2api(),
                large_text: self_.get(1).wire2api(),
                small_image: self_.get(2).wire2api(),
                small_text: self_.get(3).wire2api(),
            }
        }
    }
    impl Wire2Api<RPCButton> for JsValue {
        fn wire2api(self) -> RPCButton {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            RPCButton {
                label: self_.get(0).wire2api(),
                url: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<RPCParty> for JsValue {
        fn wire2api(self) -> RPCParty {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            RPCParty {
                id: self_.get(0).wire2api(),
                size: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<RPCSecrets> for JsValue {
        fn wire2api(self) -> RPCSecrets {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            RPCSecrets {
                join: self_.get(0).wire2api(),
                spectate: self_.get(1).wire2api(),
                match_str: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<RPCTimestamps> for JsValue {
        fn wire2api(self) -> RPCTimestamps {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            RPCTimestamps {
                start: self_.get(0).wire2api(),
                end: self_.get(1).wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl<T> Wire2Api<Option<T>> for JsValue
    where
        JsValue: Wire2Api<T>,
    {
        fn wire2api(self) -> Option<T> {
            (!self.is_null() && !self.is_undefined()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<[i32; 2]> for JsValue {
        fn wire2api(self) -> [i32; 2] {
            let vec: Vec<i32> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }
    impl Wire2Api<i64> for JsValue {
        fn wire2api(self) -> i64 {
            ::std::convert::TryInto::try_into(self.dyn_into::<js_sys::BigInt>().unwrap()).unwrap()
        }
    }
    impl Wire2Api<Vec<i32>> for JsValue {
        fn wire2api(self) -> Vec<i32> {
            self.unchecked_into::<js_sys::Int32Array>().to_vec().into()
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use self::web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_discord_init(port_: i64, client_id: *mut wire_uint_8_list) {
        wire_discord_init_impl(port_, client_id)
    }

    #[no_mangle]
    pub extern "C" fn wire_discord_connect(port_: i64) {
        wire_discord_connect_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_discord_reconnect(port_: i64) {
        wire_discord_reconnect_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_discord_close(port_: i64) {
        wire_discord_close_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_discord_clear_activity(port_: i64) {
        wire_discord_clear_activity_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_discord_set_activity(port_: i64, activity: *mut wire_RPCActivity) {
        wire_discord_set_activity_impl(port_, activity)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_i64_0(value: i64) -> *mut i64 {
        support::new_leak_box_ptr(value)
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_rpc_activity_0() -> *mut wire_RPCActivity {
        support::new_leak_box_ptr(wire_RPCActivity::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_rpc_assets_0() -> *mut wire_RPCAssets {
        support::new_leak_box_ptr(wire_RPCAssets::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_rpc_party_0() -> *mut wire_RPCParty {
        support::new_leak_box_ptr(wire_RPCParty::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_rpc_secrets_0() -> *mut wire_RPCSecrets {
        support::new_leak_box_ptr(wire_RPCSecrets::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_rpc_timestamps_0() -> *mut wire_RPCTimestamps {
        support::new_leak_box_ptr(wire_RPCTimestamps::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_int_32_list_0(len: i32) -> *mut wire_int_32_list {
        let ans = wire_int_32_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    #[no_mangle]
    pub extern "C" fn new_list_rpc_button_0(len: i32) -> *mut wire_list_rpc_button {
        let wrap = wire_list_rpc_button {
            ptr: support::new_leak_vec_ptr(<wire_RPCButton>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<i64> for *mut i64 {
        fn wire2api(self) -> i64 {
            unsafe { *support::box_from_leak_ptr(self) }
        }
    }
    impl Wire2Api<RPCActivity> for *mut wire_RPCActivity {
        fn wire2api(self) -> RPCActivity {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<RPCActivity>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<RPCAssets> for *mut wire_RPCAssets {
        fn wire2api(self) -> RPCAssets {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<RPCAssets>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<RPCParty> for *mut wire_RPCParty {
        fn wire2api(self) -> RPCParty {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<RPCParty>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<RPCSecrets> for *mut wire_RPCSecrets {
        fn wire2api(self) -> RPCSecrets {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<RPCSecrets>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<RPCTimestamps> for *mut wire_RPCTimestamps {
        fn wire2api(self) -> RPCTimestamps {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<RPCTimestamps>::wire2api(*wrap).into()
        }
    }

    impl Wire2Api<[i32; 2]> for *mut wire_int_32_list {
        fn wire2api(self) -> [i32; 2] {
            let vec: Vec<i32> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }

    impl Wire2Api<Vec<i32>> for *mut wire_int_32_list {
        fn wire2api(self) -> Vec<i32> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    impl Wire2Api<Vec<RPCButton>> for *mut wire_list_rpc_button {
        fn wire2api(self) -> Vec<RPCButton> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }

    impl Wire2Api<RPCActivity> for wire_RPCActivity {
        fn wire2api(self) -> RPCActivity {
            RPCActivity {
                state: self.state.wire2api(),
                details: self.details.wire2api(),
                timestamps: self.timestamps.wire2api(),
                party: self.party.wire2api(),
                assets: self.assets.wire2api(),
                secrets: self.secrets.wire2api(),
                buttons: self.buttons.wire2api(),
            }
        }
    }
    impl Wire2Api<RPCAssets> for wire_RPCAssets {
        fn wire2api(self) -> RPCAssets {
            RPCAssets {
                large_image: self.large_image.wire2api(),
                large_text: self.large_text.wire2api(),
                small_image: self.small_image.wire2api(),
                small_text: self.small_text.wire2api(),
            }
        }
    }
    impl Wire2Api<RPCButton> for wire_RPCButton {
        fn wire2api(self) -> RPCButton {
            RPCButton {
                label: self.label.wire2api(),
                url: self.url.wire2api(),
            }
        }
    }
    impl Wire2Api<RPCParty> for wire_RPCParty {
        fn wire2api(self) -> RPCParty {
            RPCParty {
                id: self.id.wire2api(),
                size: self.size.wire2api(),
            }
        }
    }
    impl Wire2Api<RPCSecrets> for wire_RPCSecrets {
        fn wire2api(self) -> RPCSecrets {
            RPCSecrets {
                join: self.join.wire2api(),
                spectate: self.spectate.wire2api(),
                match_str: self.match_str.wire2api(),
            }
        }
    }
    impl Wire2Api<RPCTimestamps> for wire_RPCTimestamps {
        fn wire2api(self) -> RPCTimestamps {
            RPCTimestamps {
                start: self.start.wire2api(),
                end: self.end.wire2api(),
            }
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_int_32_list {
        ptr: *mut i32,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_rpc_button {
        ptr: *mut wire_RPCButton,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_RPCActivity {
        state: *mut wire_uint_8_list,
        details: *mut wire_uint_8_list,
        timestamps: *mut wire_RPCTimestamps,
        party: *mut wire_RPCParty,
        assets: *mut wire_RPCAssets,
        secrets: *mut wire_RPCSecrets,
        buttons: *mut wire_list_rpc_button,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_RPCAssets {
        large_image: *mut wire_uint_8_list,
        large_text: *mut wire_uint_8_list,
        small_image: *mut wire_uint_8_list,
        small_text: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_RPCButton {
        label: *mut wire_uint_8_list,
        url: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_RPCParty {
        id: *mut wire_uint_8_list,
        size: *mut wire_int_32_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_RPCSecrets {
        join: *mut wire_uint_8_list,
        spectate: *mut wire_uint_8_list,
        match_str: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_RPCTimestamps {
        start: *mut i64,
        end: *mut i64,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_RPCActivity {
        fn new_with_null_ptr() -> Self {
            Self {
                state: core::ptr::null_mut(),
                details: core::ptr::null_mut(),
                timestamps: core::ptr::null_mut(),
                party: core::ptr::null_mut(),
                assets: core::ptr::null_mut(),
                secrets: core::ptr::null_mut(),
                buttons: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_RPCActivity {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_RPCAssets {
        fn new_with_null_ptr() -> Self {
            Self {
                large_image: core::ptr::null_mut(),
                large_text: core::ptr::null_mut(),
                small_image: core::ptr::null_mut(),
                small_text: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_RPCAssets {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_RPCButton {
        fn new_with_null_ptr() -> Self {
            Self {
                label: core::ptr::null_mut(),
                url: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_RPCButton {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_RPCParty {
        fn new_with_null_ptr() -> Self {
            Self {
                id: core::ptr::null_mut(),
                size: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_RPCParty {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_RPCSecrets {
        fn new_with_null_ptr() -> Self {
            Self {
                join: core::ptr::null_mut(),
                spectate: core::ptr::null_mut(),
                match_str: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_RPCSecrets {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_RPCTimestamps {
        fn new_with_null_ptr() -> Self {
            Self {
                start: core::ptr::null_mut(),
                end: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_RPCTimestamps {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
